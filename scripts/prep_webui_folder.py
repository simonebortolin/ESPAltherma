Import("env")

try:
    import rcssmin
    import htmlmin
    from jsmin import jsmin
    import step
except ImportError:
    env.Execute("$PYTHONEXE -m pip install rcssmin htmlmin jsmin step-template")
finally:
    import rcssmin
    import htmlmin
    from jsmin import jsmin
    import step

import os
import shutil
import glob
import gzip

cppDefines = env.ParseFlags(env['BUILD_FLAGS']).get('CPPDEFINES')
namespace = {'platform': env['PIOPLATFORM'], 'mcu': env.get('BOARD_MCU') or ""}

for idx, define,  in enumerate( cppDefines):
    namespace[define] = idx

filetypes_to_gzip = ['js', 'html', 'css']
data_src_dir = os.path.join(env.get('PROJECT_DIR'), 'webui')
build_src_dir = os.path.join(env.get('PROJECT_DIR'), 'build', 'webui')

print('Cleaning up old builded webui files...')

filesToDelete = glob.glob(os.path.join(build_src_dir, '*.*'))

if not filesToDelete:
    print('NOTHING TO CLEAN!')

for file in filesToDelete:
    print('  Delete file: ' + file)
    os.remove(file)

print('Finished cleaning up webui files...')

print('Generating new webui files...')

minify = env.get('BUILD_TYPE') != 'debug'

files_to_gzip = []
for extension in filetypes_to_gzip:
    files_to_gzip.extend(glob.glob(os.path.join(data_src_dir, '*.' + extension)))

print('  files to embedd: ' + str(files_to_gzip))

if not os.path.exists(build_src_dir):
    os.makedirs(build_src_dir)

filesToIncludeInHeader = []

for file in files_to_gzip:
    print('  Processing file: ' + file)
    filename = os.path.basename(file)
    srcFile = os.path.join(data_src_dir, filename)
    buildDirFile = os.path.join(build_src_dir, filename)
    tmpFile = buildDirFile + ".tmp"
    gzFile = buildDirFile + ".gz"
    extension = filename.split(".")[-1]

    shutil.copyfile(srcFile, tmpFile)

    if extension == "js":
        with open(tmpFile, 'r') as js_file:
            parsedJSFile = step.Template(js_file.read()).expand(namespace)

            if minify:
                parsedJSFile = jsmin(parsedJSFile)

        with open(tmpFile, 'w') as js_file:
            js_file.write(parsedJSFile)
    elif extension == "html":
        with open(tmpFile,'r') as fileHandler:
            parsedHTMLFile = step.Template(fileHandler.read()).expand(namespace)

            if minify:
                parsedHTMLFile = htmlmin.minify(parsedHTMLFile)

        with open(tmpFile,'w') as fileHandler:
            fileHandler.write(parsedHTMLFile)
    elif extension == "css":
        with open(tmpFile,'r') as fileHandler:
            parsedCSSLFile = step.Template(fileHandler.read()).expand(namespace)

            if minify:
                parsedCSSLFile = rcssmin.cssmin(parsedCSSLFile)

        with open(tmpFile,'w') as fileHandler:
            fileHandler.write(parsedCSSLFile)

    with open(tmpFile, "rb") as src, gzip.open(gzFile, 'wb') as dst:
        dst.writelines(src)

    os.remove(tmpFile)

    dstFile = gzFile + ".h"
    filesToIncludeInHeader += [os.path.basename(dstFile)]

    with open(gzFile, "rb") as src, open(dstFile, 'w') as dst:
        data = src.read()
        srcSize = src.tell()

        baseName = os.path.basename(gzFile.replace('.', '_'))
        constName = baseName + '_len'

        dst.write('//\n// AUTO-Generated by prepare build script, do not change!!!\n//\n\n')
        dst.write('#include <Arduino.h>\n\n')
        dst.write('#define ' + constName  + ' ' + str(srcSize) + '\n')
        dst.write('const uint8_t ' + baseName + '[] PROGMEM = {')

        hex_string = ', '.join([f'0x{byte:02X}' for byte in data])
        dst.write(hex_string)

        dst.write('\n};')

mainHeader = os.path.join(build_src_dir, "webfileHeaders.h")
print('Generating main header file: ' + mainHeader)
with open(mainHeader, 'w') as dst:
    for file in filesToIncludeInHeader:
        dst.write('#include "' + file + '"\n')

print('Finished generating webui files!')